<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhixin.dao.${moduleName}.impl.${classname}DaoImpl">
	  <resultMap id="${tablename}_map" type="com.zhixin.entities.${moduleName}.${classname}Entity">
		 #foreach($row in $collist)
			<result property="${row.newfield_name}" column="${row.column_name}" /> 
		#end 
	</resultMap>
	#set ($key=1)
	#foreach($row in $collist)
		#if(${row.column_key} == "PRI")
			#set ($key=${row.newfield_name})
		#end
	#end	
	<insert id="create" parameterType="com.zhixin.entities.${moduleName}.${classname}Entity">
		insert into  ${tablename} (
			$key 
			#foreach($row in $collist)
				#if(${row.column_key} != "PRI" && ${row.newfield_name} != "createdTime" && ${row.newfield_name} != "updatedTime")
					 ,`${row.column_name}`
				 #end 
			#end 
		) values ( 
	    #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			       #{${row.newfield_name}} 
			#end 
		#end	  
		#foreach($row in $collist)
			#if(${row.column_key} != "PRI" && ${row.newfield_name} != "createdTime" && ${row.newfield_name} != "updatedTime")
				, #{${row.newfield_name}} 
			#end 
		#end 
		)
	</insert>
	<update id="update" parameterType="com.zhixin.entities.${moduleName}.${classname}Entity">
		update ${tablename}      
	 <set> 
     #foreach($row in $collist)  
			#if(${row.column_key} != "PRI")
			 #if(${row.newfield_name} != "createdBy" && ${row.newfield_name} != "createdTime"  && ${row.newfield_name} != "updatedTime"   && ${row.newfield_name} != "status" ) 
				`${row.column_name}` =#{${row.newfield_name}}, 
			  #end 
			#end 
		#end	  
	</set> 
     where 
		#foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			        `${row.column_name}` = #{${row.newfield_name}} 
			#end 
		#end	 
		
	</update>
	<delete id="remove" parameterType="Long">
		update  ${tablename}  set
		 status= 0
		where 
		 #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			        `${row.column_name}` = #{${row.newfield_name}} 
			#end 
		#end	 
	</delete>
	<select id="findAll" resultMap="${tablename}_map">
		 select #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			     `${row.column_name}`
			#end 
		#end	  
		#foreach($row in $collist)  
			#if(${row.column_key} != "PRI") 
			        ,`${row.column_name}`
			#end 
		#end	  from  ${tablename} where `status`=1
	</select> 
	
	<select id="find" resultMap="${tablename}_map" parameterType="Long">
	  select #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			     `${row.column_name}`
			#end 
		#end	  
		#foreach($row in $collist)  
			#if(${row.column_key} != "PRI") 
			        ,`${row.column_name}`
			#end 
		#end	  from  ${tablename} where 
		#foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			        `${row.column_name}` = #{${row.newfield_name}} 
			#end 
		#end	 
		and  `status`=1
	</select> 
	<select id="findByPKList" resultMap="${tablename}_map" parameterType="List">
		 select #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			     `${row.column_name}`
			#end 
		#end	  
		#foreach($row in $collist)  
			#if(${row.column_key} != "PRI") 
			        ,`${row.column_name}`
			#end 
		#end	  from  ${tablename} where 
		#foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			        `${row.column_name}` in 
			#end 
		#end	 
		<foreach collection="list" item="key" open="(" separator="," close=")">
			#{key}
		</foreach>
		and `status`=1 
		
	</select>
	<select id="findByBeanProp" parameterType="com.zhixin.entities.${moduleName}.${classname}Entity" resultMap="${tablename}_map">
		select #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			     `${row.column_name}`
			#end 
		#end	  
		#foreach($row in $collist)  
			#if(${row.column_key} != "PRI") 
			        ,`${row.column_name}`
			#end 
		#end	  from  ${tablename} where  `status`=1
		#foreach($row in $collist)  
			#if(${row.coltype} == "String")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` like concat('%',#{${row.newfield_name}},'%') 
			    </if>  
			#end   
		#if(${row.coltype} == "Integer" && ${row.column_name} != "status")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` = #{${row.newfield_name}}
			    </if>  
			#end   
			#if(${row.coltype} == "Long")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` = #{${row.newfield_name}}
			    </if>  
			#end   
		#end
	</select>
	<select id="findForPager" parameterType="map" resultMap="${tablename}_map">
		select #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			     `${row.column_name}`
			#end 
		#end	  
		#foreach($row in $collist)  
			#if(${row.column_key} != "PRI") 
			        ,`${row.column_name}`
			#end 
		#end	  from  ${tablename} where  `status`=1
		#foreach($row in $collist)  
			#if(${row.coltype} == "String")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` like concat('%',#{${row.newfield_name}},'%') 
			    </if>  
			#end   
			#if(${row.coltype} == "Integer" && ${row.column_name} != "status")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` = #{${row.newfield_name}} 
			    </if>  
			#end   
			#if(${row.coltype} == "Long")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` = #{${row.newfield_name}} 
			    </if>  
			#end  
		#end
	      limit #{startNum},#{pageSize}
	</select>
	<select id="findForPagerCount" parameterType="com.zhixin.entities.${moduleName}.${classname}Entity" resultType="Integer"> 
		select count(1) as count from  ${tablename} where  status=1
		#foreach($row in $collist)  
			#if(${row.coltype} == "String")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` like concat('%',#{${row.newfield_name}},'%') 
			    </if>  
			#end 
			#if(${row.coltype} == "Integer" && ${row.column_name} != "status")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` = #{${row.newfield_name}}
			    </if>  
			#end   
			#if(${row.coltype} == "Long")
				<if test="${row.newfield_name} != null">  
			      and `${row.column_name}` = #{${row.newfield_name}}
			    </if>  
			#end  
		#end 
	</select>
	
	<select id="dyFindForPager" parameterType="map" resultMap="${tablename}_map">
		select #foreach($row in $collist)  
			#if(${row.column_key} == "PRI") 
			     `${row.column_name}`
			#end 
		#end	  
		#foreach($row in $collist)  
			#if(${row.column_key} != "PRI") 
			        ,`${row.column_name}`
			#end 
		#end from  ${tablename} where  `status`=1
		  		
   		<if test = "conditionList != null">
			 <foreach collection="conditionList" item="item" index="index"  >  
	     			 
			        <choose>  
			            <when test="item.dbOp == 'in' ">  
			               and `${item.colName}`  IN   
					     <foreach collection="item.value" item="key"  open="(" separator="," close=")">  
					        #{key}  
					     </foreach>  
			            </when >  
			            <when test="item.dbOp == 'like' ">  
			             and   `${item.colName}` like #{item.value}
			            </when >   
			            <otherwise>  
			            and	 `${item.colName}`  ${item.dbOp}  #{item.value}  
			            </otherwise>  
			        </choose>  
	   		 </foreach>   
		</if>
		<if test ="order != null">
			order by 
			 <foreach collection="order" item="item" index="index" separator="," >  
	     			`${item}`
	   		 </foreach>   
		</if>
		<if test ="direction != null">
			${direction}
		</if>
	      limit #{startNum},#{pageSize}
	</select>
	<select id="dyFindForPagerCount" parameterType="map" resultType="Integer"> 
		select count(1) as count from  ${tablename} where  status=1
		 <if test = "conditionList != null">
			 <foreach collection="conditionList" item="item" index="index"  >  
	     			 
			        <choose>  
			            <when test="item.dbOp == 'in' ">  
			               and `${item.colName}`  IN   
					     <foreach collection="item.value" item="key"  open="(" separator="," close=")">  
					        #{key}  
					     </foreach>  
			            </when >  
			            <when test="item.dbOp == 'like' ">  
			             and   `${item.colName}` like  #{item.value} 
			            </when >   
			            <otherwise>  
			            and	 `${item.colName}`  ${item.dbOp}  #{item.value}  
			            </otherwise>  
			        </choose>  
	   		 </foreach>   
		</if>
	</select>
	<select id="countWithGroupBy" parameterType="map" resultType="map">
        select  
            count(1) as count
         <if test="group_by != null">
            <foreach collection="group_by" item="item" index="index" open=","
                separator=",">
                `${item}`
            </foreach>
        </if>
        from ${tablename} where status=1 
        <if test="conditionList != null">
            <foreach collection="conditionList" item="item" index="index"> 
                <choose>
                    <when test="item.dbOp == 'in' ">
                        and `${item.colName}` IN
                        <foreach collection="item.value" item="key" open="("
                            separator="," close=")">
                            #{key}
                        </foreach>
                    </when>
                    <when test="item.dbOp == 'like' ">
                        and `${item.colName}` like #{item.value} 
                    </when>
                    <otherwise>
                        and `${item.colName}` ${item.dbOp} #{item.value}
                    </otherwise>
                </choose>
            </foreach>
        </if>
        <if test="group_by != null">
            group by
            <foreach collection="group_by" item="item" index="index"
                separator=",">
                `${item}`
            </foreach>
        </if>
          <if test="order != null">
            order by
            <foreach collection="order" item="item" index="index"
                separator=",">
                `${item}`
            </foreach>
        </if>
        <if test="direction != null">
            ${direction}
        </if>
    </select>
	 
</mapper>
